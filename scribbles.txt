
2024-07-11 | xformers from purrio_geographix
No longer needed?:
blob_to_hex: covered by formatter
delimited_array_with_nulls: pandas
decode_depth_registration: raster_log, we skip log_depth_cal_vec, not needed
decode_curve_values: vector_log, dupicated, but I suppose we could.

    if func_name == "blob_to_hex":
        return row[col].hex()

    if func_name == "delimited_array_with_nulls":
        values = row[col].split(purr_delimiter)
        return [ensure_type(data_type, v) if v != purr_null else None for v in values]

    if func_name == "decode_depth_registration":
        reg_points = []
        buf = bytearray(row[col])
        for i in range(12, len(buf), 28):
            depth_bytes = buf[i : i + 8]  # 64-bit float (double)
            depth = struct.unpack("d", depth_bytes)[0]
            pixel_bytes = buf[i + 12 : i + 16]  # 32-bit integer
            pixel = struct.unpack("i", pixel_bytes)[0]
            reg_points.append({"depth": depth, "pixel": pixel})
        return reg_points

    if func_name == "decode_curve_values":
        curve_vals = []
        buf = bytearray(row[col])
        for i in range(2, len(buf), 4):
            cval_bytes = buf[i : i + 4]  # 32 bit float
            cval = struct.unpack("<f", cval_bytes)[0]
            curve_vals.append(cval)
        return curve_vals
    else:
        if data_type not in ("object", "string", "number", "date"):
            print("--------NEED TO ADD XFORM-------->", data_type)
        return ensure_type(data_type, row[col])



# yanked out 2024-07-07

class SettingsWithRepos(BaseModel):
    settings: Optional[Settings] = None
    repos: List[Repo] = []

@router.get("/settings/", response_model=schemas.SettingsWithRepos)
def read_settings(db: Session = Depends(get_db)):
    result = crud.get_settings(db)
    return schemas.SettingsWithRepos(
        settings=result["settings"] if result["settings"] else None,
        repos=result["repos"],
    )


# THIS WORKS as of 2024-06-16
# def upsert_settings(db: Session, settings: schemas.SettingsCreate):
#     stmt = text("""
#         INSERT INTO settings (file_depot)
#         VALUES (:file_depot)
#         ON CONFLICT(file_depot) DO UPDATE SET file_depot = excluded.file_depot
#         """)
#     db.execute(stmt, {"file_depot": settings.file_depot})
#     db.commit()
#
#     result = db.execute(text("SELECT file_depot FROM settings")).fetchone()
#     return schemas.Settings(file_depot=result[0] if result else None)

# works for settings everything at once
# def write_settings(db: Session, settings: schemas.SettingsCreate):
#     delete_stmt = text("DELETE FROM settings")
#     db.execute(delete_stmt)
#     insert_stmt = text("INSERT INTO settings (file_depot) VALUES (:file_depot)")
#     db.execute(insert_stmt, {"file_depot": settings.file_depot})
#     db.commit()
#     result = db.execute(text("SELECT file_depot FROM settings")).fetchone()
#     return schemas.Settings(file_depot=result[0] if result else None)

# class CustomJSONResponse(JSONResponse):
#     def render(self, content: any) -> bytes:
#         return json.dumps(
#             content,
#             ensure_ascii=False,
#             allow_nan=False,
#             indent=None,
#             separators=(",", ":"),
#             cls=CustomEncoder,
#         ).encode("utf-8")
